#!<%= $perl_path %>

# This script is for creating node groups in the classifier
#
#   Author M. Mallard 9 Feb 2019
#

use strict;
<% if !empty($perl_lib_path) { %>
use lib '<%= $perl_lib_path %>';
<% } %>
use Puppet::Classify;
use YAML qw(LoadFile);
use JSON; # imports encode_json, decode_json, to_json and from_json
use Log::MixedColor;
use Term::ANSIColor;
use Getopt::Std;
use 5.10.0;

# Globals
my $config = LoadFile( "<%= $api_access_config_path %>" );
my $json = JSON->new->allow_nonref;

my $puppet_db = Puppet::DB->new(
    server_name => $config->{puppetdb_host},
    server_port => $config->{puppetdb_port},
);
my $classify = Puppet::Classify->new(
    cert_name       => $config->{puppet_classify_cert},
    server_name     => $config->{puppet_classify_host},
    server_port     => $config->{puppet_classify_port},
    puppet_ssl_path => $config->{puppet_ssl_path},
    environment     => '<%= $puppet_classify_environment %>',
    puppet_db       => $puppet_db,
);
# Set up logging
my $log = Log::MixedColor->new;

# Command line argument processing
our( $opt_a, $opt_h, $opt_f );
getopts('a:hf:');
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Main script actions - i.e. how to interpret the other command line arguments
my @actions = qw(add_agent_env delete_group list_groups get_group_id);

# Help message
if( $opt_h ){
    say "\n$0 [-f csv|yaml|json] -a action [group name]";
    say;
    say;
    say "\t-a the action to perform";
    say "\nThe following actions are supported:";
    for( @actions ){
        say "\t\t".$_;
    }
    say "\t-f data format to output (defaults to json) (when listing groups)";
    say "When listing the groups the 'group name' will be treated as a sub string";
    say;
    exit;
}
# CLA validation
my $action_re = join("|", @actions);
$action_re = qr/$action_re/;
$log->fatal_err( "You need to specify the script action: -a ".join(" | ", @actions ) ) if not $opt_a =~ $action_re;

# Mainline
if( $opt_a eq "add_agent_env" ){
    my $parent_group = $ARGV[0];
    $log->fatal_err( "Please specify the parent group of the group you are creating" ) unless $parent_group;
    my $parent_id = $classify->get_group_id( $parent_group );
    $log->fatal_err( "The specified group could not be found in the node classifier" ) unless $parent_id;

    agent_specified_env( $parent_id, $parent_group );

} elsif( $opt_a eq "get_group_id" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group" ) unless $group_name;
    my $group_id = $classify->get_group_id( $group_name );
    if( $group_id ){
        say "Group ID: ".color('magenta').$group_id.color('reset');
    } else {
        $log->fatal_err( "No such group was found: $group_name" );
    }
} elsif( $opt_a eq "delete_group" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group to be deleted" ) unless $group_name;
    my $group_id = $classify->get_group_id( $group_name );
    if( $group_id ){
        say "Deleting group: ".color('magenta').$group_name.color('reset');
        $classify->try_remove_group( $group_name );
    } else {
        $log->fatal_err( "No such group was found: $group_name" );
    }
} elsif( $opt_a eq "list_groups" ){
    # Match the group substr specified on the command line - match all if none specified
    my $group_match = $ARGV[0];

    my $groups = $classify->get_groups();

    my @ans;
    for my $group ( @$groups ){
        push @ans, $group->{name} if $group->{name} =~ /$group_match/;
    }
    if( $opt_f eq 'csv' ){
        for my $group ( @ans ){
            say $group;
        }
    } elsif( $opt_f eq 'yaml' ){
        say Dump( \@ans);
    } else {
        say $json->pretty->encode( \@ans );
    }
} else {
    $log->fatal_err( "Unknown action??" );
}


sub agent_specified_env {
    my $parent_id = shift;
    my $parent_group = shift;
    my $rule = [
                 'and',
                 [
                    '~',
                    'certname',
                    '\.*'
                 ]
               ];
    my $group_name = $parent_group." - temp";
    my $group = { name        => $group_name,
                  environment => 'agent-specified',
                  description => "Group for testing code through workflow",
                  parent      => $parent_id,
                  rule        => $rule,
                  classes     => {},
                };



    say "Creating temporary group ".color('blue').$group_name.color('reset')." under ".color('magenta').$parent_group.color('reset');
    $classify->create_group( $group );
}


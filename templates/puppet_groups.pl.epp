#!<%= $perl_path %>

# This script is for creating node groups in the classifier
#
#   Author M. Mallard 9 Feb 2019
#

use strict;
<% if !empty($perl_lib_path) { %>
use lib '<%= $perl_lib_path %>';
<% } %>
use Puppet::Classify;
use Puppet::Orchestrator;
use YAML qw(LoadFile Dump);
use JSON; # imports encode_json, decode_json, to_json and from_json
use Log::MixedColor;
use Term::ANSIColor;
use Getopt::Std;
use Array::Utils qw(:all);
use 5.10.0;

# Globals
my $config = LoadFile( "<%= $api_access_config_path %>" );
my $json = JSON->new->allow_nonref;
my $temp_group_suffix = "<%= $temp_group_suffix %>";

my $puppet_db = Puppet::DB->new(
    server_name => $config->{puppetdb_host},
    server_port => $config->{puppetdb_port},
);
my $classify = Puppet::Classify->new(
    cert_name       => $config->{puppet_classify_cert},
    server_name     => $config->{puppet_classify_host},
    server_port     => $config->{puppet_classify_port},
    puppet_ssl_path => $config->{puppet_ssl_path},
    environment     => '<%= $puppet_classify_environment %>',
    puppet_db       => $puppet_db,
);
# Create a Puppet orchestrator object
my $orchestrator = Puppet::Orchestrator->new( $config->{puppet_tasks_host} );

# Set up logging
my $log = Log::MixedColor->new;

# Command line argument processing
our( $opt_a, $opt_h, $opt_f );
getopts('a:hf:');
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Main script actions - i.e. how to interpret the other command line arguments
my @actions = qw( 
                  create_preview_group
                  remove_preview_group
                  delete_group
                  list_groups 
                  get_group_id
                  list_nodes
                  list_children
                  list_nodes_not_in_children
                );

# Help message
if( $opt_h ){
    say "\n$0 [-f csv|yaml|json] -a action [group name]";
    say '';
    say '';
    say "\t-a the action to perform";
    say "\nThe following actions are supported:";
    for( @actions ){
        say "\t\t".$_;
    }
    say "\t-f data format to output (defaults to json) (when listing groups)";
    say "When listing the groups the 'group name' will be treated as a sub string";
    say '';
    exit;
}
# CLA validation
my $action_re = join("|", @actions);
$action_re = qr/$action_re/;
$log->fatal_err( "You need to specify the script action: -a ".join(" | ", @actions ) ) if not $opt_a =~ $action_re;

# Mainline
if( $opt_a eq "create_preview_group" ){
    my $parent_group = $ARGV[0];
    $log->fatal_err( "Please specify the parent group of the group you are creating" ) unless $parent_group;
    my $parent_id = $classify->get_group_id( $parent_group );
    $log->fatal_err( "The specified group could not be found in the node classifier" ) unless $parent_id;

    create_preview_group( $parent_id, $parent_group );

} elsif( $opt_a eq "remove_preview_group" ){
    my $parent_group = $ARGV[0];
    $log->fatal_err( "Please specify the parent group of the group you are removing" ) unless $parent_group;

    remove_preview_group( $parent_group );

} elsif( $opt_a eq "get_group_id" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group" ) unless $group_name;
    my $group_id = $classify->get_group_id( $group_name );
    if( $group_id ){
        say "Group ID: ".color('magenta').$group_id.color('reset');
    } else {
        $log->fatal_err( "No such group was found: $group_name" );
    }
} elsif( $opt_a eq "delete_group" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group to be deleted" ) unless $group_name;
    my $group_id = $classify->get_group_id( $group_name );
    if( $group_id ){
        say "Deleting group: ".color('magenta').$group_name.color('reset');
        $classify->try_remove_group( $group_name );
    } else {
        $log->fatal_err( "No such group was found: $group_name" );
    }
} elsif( $opt_a eq "create_group" ){
    my $group_name = $ARGV[0];
    my $parent_name = $ARGV[1];
    $log->fatal_err( "Please specify the group to be created as the first argument" ) unless $group_name;
    $log->fatal_err( "Please specify the parent of the group to be created as the second argument" ) unless $parent_name;
    my $parent_id = $classify->get_group_id( $parent_name );
    $log->fatal_err( "The specified group could not be found in the node classifier" ) unless $parent_id;
    if( $parent_id ){
        say "Adding group: ".color('magenta').$group_name.' as child of parent: '.$parent_name.color('reset');
        my $group = {
                      name   => $group_name,
                      parent => $parent_id,
                    };
        $classify->add_group_safe( $group_name, $group, 0 );
    } else {
        $log->fatal_err( "No such parent group was found: $parent_name" );
    }
} elsif( $opt_a eq "list_groups" ){
    # Match the group substr specified on the command line - match all if none specified
    my $group_match = $ARGV[0];

    my $groups = $classify->get_groups();

    my @ans;
    for my $group ( @$groups ){
        push @ans, $group->{name} if $group->{name} =~ /$group_match/ or ! $group_match;
    }
    @ans = sort @ans;
    if( $opt_f eq 'csv' ){
        for my $group ( @ans ){
            say $group;
        }
    } elsif( $opt_f eq 'yaml' ){
        say Dump( \@ans);
    } else {
        say $json->pretty->encode( \@ans );
    }
} elsif( $opt_a eq "list_nodes" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group to list the nodes in" ) unless $group_name;

    my $nodes = $classify->get_nodes_matching_group( $group_name );

    if( $opt_f eq 'csv' ){
        for ( @$nodes ){
            say;
        }
    } elsif( $opt_f eq 'yaml' ){
        say Dump( $nodes );
    } else {
        say $json->pretty->encode( $nodes  );
    }
} elsif( $opt_a eq "list_children" ){
    my $group_name = $ARGV[0];
    $log->fatal_err( "Please specify the group to list the child groups in" ) unless $group_name;

    my $parent_id = $classify->get_group_id( $group_name );
    my $groups = $classify->get_group_children( $parent_id );
    my @ans;
    for my $group ( @$groups ){
        push @ans, $group->{name};
    }
    @ans = sort @ans;
    if( $opt_f eq 'csv' ){
        for my $group ( @ans ){
            say $group;
        }
    } elsif( $opt_f eq 'yaml' ){
        say Dump( \@ans);
    } else {
        say $json->pretty->encode( \@ans );
    }
} elsif( $opt_a eq "list_nodes_not_in_children" ){
    my @ans = list_nodes_not_in_children( $ARGV[0] );
    if( $opt_f eq 'csv' ){
        for my $group ( @ans ){
            say $group;
        }
    } elsif( $opt_f eq 'yaml' ){
        say Dump( \@ans);
    } else {
        say $json->pretty->encode( \@ans );
    }
} else {
    $log->fatal_err( "Unknown action??" );
}

sub list_nodes_not_in_children {
    my $group_name = shift;
    $log->fatal_err( "Please specify the group to list the child groups in" ) unless $group_name;

    #say "Getting list of parent nodes";
    my @nodes = @{ $classify->get_nodes_matching_group( $group_name ) };
    #say "Getting the id of the parent group";
    my $parent_id = $classify->get_group_id( $group_name );
    #say "Getting list of child groups";
    my $groups = $classify->get_group_children( $parent_id );
    my @child_nodes;
    for my $group ( @$groups ){
    #say "Getting list of nodes in ". $group->{name};
        # This query fails if there are no nodes in the group
        eval {
            push @child_nodes, @{ $classify->get_nodes_matching_group( $group->{name} ) };
        };
    }
    @nodes = sort( unique( @nodes));
    #say Dump( \@nodes );
    @child_nodes = sort( unique( @child_nodes));
    #say Dump( \@child_nodes );
    my @ans = array_minus(@nodes, @child_nodes);
    return @ans;
}

sub remove_preview_group {
    my $parent_group = shift;

    # Define the temporary group
    my $group_name = $parent_group.$temp_group_suffix;

    # Find the nodes matching the group
    my $nodes = $classify->get_nodes_matching_group( $group_name );

    # Put the nodes into normal mode (Revert NOOP)
    my $jobid = $orchestrator->submit_task( "utility_scripts::noop", { action => 'revert' }, $nodes );
    $orchestrator->wait_for_job($jobid);

    # Delete the group
    $classify->try_remove_group( $group_name );
}

sub create_preview_group {
    my $parent_id = shift;
    my $parent_group = shift;
    my $rule = [];

    # Define the temporary group
    my $group_name = $parent_group.$temp_group_suffix;
    my $group = { 
                  name               => $group_name,
                  environment        => 'agent-specified',
                  environment_trumps => JSON::true,
                  description        => "Group for testing code through workflow",
                  parent             => $parent_id,
                  classes            => {},
                };

    # Make sure the group doesn't exit already
    $classify->try_remove_group( $group_name );

    # Create the temp node group
    say "Creating temporary group ".color('blue').$group_name.color('reset')." under ".color('magenta').$parent_group.color('reset');
    $classify->create_group( $group );
    my @nodes = unique( list_nodes_not_in_children( $parent_group ) );
    #say Dump( \@nodes );
    $orchestrator->environment( '<%= $puppet_tasks_environment %>' );

    # Run a job to find out which nodes are responding properly to the orchestrator
    my $jobid = $orchestrator->submit_task( "utility_scripts::quicktest", {}, \@nodes );
    #say $jobid;
    #$orchestrator->print_output_wait($jobid);
    $orchestrator->wait_for_job($jobid);
    my $results = $orchestrator->get_job_results($jobid);
    #say Dump( $results );
    my @good_nodes;
    for my $event ( @{ $results->{items} } ){
        #say join( ', ', $event->{details}{node}, $event->{type} );
        #say $event->{details}{detail}{_error}{msg}." - it will excluded hereafter" if $event->{type} eq 'node_errored';
        push @good_nodes, $event->{details}{node} if $event->{type} eq 'node_finished';
    }
    #say Dump( \@good_nodes );

    # Pin the good nodes to the temp group
    $classify->pin_nodes_to_group( $group_name, \@good_nodes );

    # Put the nodes in the group in NOOP and check we were successful
    $jobid = $orchestrator->submit_task( "utility_scripts::noop", { action => 'on' }, \@good_nodes );
    $orchestrator->wait_for_job($jobid);
    my $results = $orchestrator->get_job_results($jobid);
    #say Dump( $results );
    my @noop_nodes;
    for my $event ( @{ $results->{items} } ){
        push @noop_nodes, $event->{details}{node} if $event->{type} eq 'node_finished';
    }
    unless( @noop_nodes == @good_nodes ){
        print "Failed to put all nodes into NOOP mode, cleaning up...";
        remove_preview_group( $parent_group );
        say "done.";
        exit 1;
    }
    my $group_id = $classify->get_group_id( $group_name );
    say "The group ID of the temporary group is: ".color('blue').$group_id.color('reset');


}

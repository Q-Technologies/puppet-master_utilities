#!<%= $perl_path %>

# This script is for summarising reports from the Puppet DB
#
#   Author M. Mallard 15 Feb 2019
#

use strict;
<% if !empty($perl_lib_path) { -%>
use lib '<%= $perl_lib_path %>';
<% } %>
use POSIX qw(strftime);
use Puppet::DB;
use Puppet::Classify;
use Term::ANSIColor;
use YAML qw(LoadFile Dump);
use Getopt::Std;
use Log::MixedColor;
use ColorDiff;
use DiffHighlight;
use 5.10.0;

# Set up logging
my $log = Log::MixedColor->new;

# Set up a diff color object
my $cd = ColorDiff->new;
$cd->file_old( color('red' ) );
$cd->file_new( color('green' ) );
$cd->diff_stuff( color('cyan' ) );

# The number of report times to list
my $num_report_times = 20;

# Command line argument processing
our( $opt_h, $opt_v, $opt_d, $opt_s, $opt_r, $opt_n, $opt_m, $opt_g, $opt_j, $opt_t,
     $opt_e, $opt_z, $opt_x, $opt_w );
getopts('hvds:r:n:m:gjtez:xw:');
$Getopt::Std::STANDARD_HELP_VERSION = 1;

# Preliminary input checks
if( $opt_h ){
    say "\n$0 [-s status] [-v] [-d] [-g|-j] node|group|job";
    say '';
    say "\t-j get reports for all nodes in a puppet job";
    say "\t-g get reports for all nodes in a puppet group";
    say "\t-s match status (provide a regex string with 'failure', 'success' or 'noop')";
    say "\t-r match resource type (provide a regex string)";
    say "\t-n match name of resource (provide a regex string)";
    say "\t-m match message (provide a regex string)";
    say "\t-z match report time rather than latest (ignored when matching a job)";
    say "\t-t show the time the puppet run ended";
    say "\t-e show the puppet environment used for the puppet run";
    say "\t-v show additional messages";
    say "\t-d show potentially destructive changes only (removals)";
    say "\t-x just show report times for specified nodes and exit";
    say "\t-w the number of report times to show (defaults to $num_report_times)";
    say '';
    exit;
}
$log->fatal_err( "Cannot specify both a job and a puppet group" ) if ( $opt_g and $opt_j );

my @nodes = ();
$opt_g = $ARGV[0] if $opt_g;
$opt_j = $ARGV[0] if $opt_j;
@nodes = @ARGV unless $opt_j or $opt_g;

# Globals
my $config = LoadFile( "<%= $api_access_config_path %>" );

# Create a Puppet DB object
my $puppet_db = Puppet::DB->new(
    server_name => $config->{puppetdb_host},
    server_port => $config->{puppetdb_port},
);

# Create a Puppet classification object
my $classify = Puppet::Classify->new( 
                  cert_name       => $config->{puppet_classify_cert},
                  server_name     => $config->{puppet_classify_host},
                  server_port     => $config->{puppet_classify_port},
                  puppet_ssl_path => $config->{puppet_ssl_path},
                  puppet_db       => $puppet_db,
                );

my $rule;

my $time_query = ['=', 'latest_report?', 'true' ];
if( $opt_z ){
    $time_query = ['=', 'end_time', $opt_z ];
}

if( $opt_g ){
    # Get the rule that defines all the nodes in the group
    $rule = $classify->get_group_rule( $opt_g );
    $log->fatal_err( "That group was not found!  Check for typos" ) unless $rule;
    # Convert the rule from Classifier to PuppetDB format
    $rule = $classify->convert_rule_for_puppetdb( $rule );
    if( $opt_x ){
        $rule = $rule->{query};
    } else {
        $rule = [ 'and', $time_query, $rule->{query} ];
    }
} elsif( $opt_j ){
    $log->fatal_err( "The specified job ID needs to be a number only" ) unless $opt_j =~ /^\d+$/;
    $rule = ['=', 'job_id', $opt_j ];
} elsif( @nodes ){
    my @node_list;
    my $node_rule;
    for my $node ( @nodes ){
        push @node_list, split /,/, $node;
    }
    if( @node_list and @node_list == 1 ){
        $node_rule = ['=', 'certname', $node_list[0] ];
    } else {
        $node_rule = ['or'];
        for my $node ( @node_list ){
            push @$node_rule, ['=', 'certname', $node ];
        }
    }
    if( $opt_x ){
        $rule = $node_rule;
    } else {
        $rule = [ 'and', $time_query, $node_rule, ];
    }
} else {
    $log->fatal_err( "Please specify a node, group or job" );
}
$rule = { query => [ 'extract', ["hash", "certname", "end_time"], $rule ] };

# Refresh the PuppetDB object with the new rule
$puppet_db->refresh( "reports", $rule );
my $data = $puppet_db->results;

if( $opt_x ){
    if( $opt_w ){
        $num_report_times = $opt_w;
    }
    #say Dumper( $data );
    my %times;
    for my $report ( @$data ){
        push @{ $times{$report->{certname}} }, $report->{end_time};
    }
    for my $node ( keys %times ){
        my @times = @{ $times{$node} };
        @times = sort {$b cmp $a} @times;
        my $num = $num_report_times - 1;
        say $node;
        say "\t".join("\n\t", @times[0..$num]);
    }
    exit;
}

for my $report ( @$data ){
    my $certname = $report->{certname};
    my $hash = $report->{hash};
    $puppet_db->refresh( "reports/$hash/events" );
    my $events = $puppet_db->results;
    $puppet_db->refresh( "reports/$hash/logs" );
    my $logs = $puppet_db->results;
    my $log_data = {};
    for my $log ( @$logs ){
        # The logs cannot be directly tied to events, but we can match the message in the event 
        # with a message in the logs.  Then we can look for other log messages for the same source 
        # within the log
        my $message = $log->{message};
        my $source = $log->{source};
        if( $log->{level} eq 'err' ){
            say $certname.": ".color('red').$log->{message}.color('reset');
        }
        push @{ $log_data->{$source} }, $message;
    }
    my $log_diff = {};
    for my $source ( keys %$log_data ){
        my $key = '';
        my $value = '';
        for my $message ( @{ $log_data->{$source} } ){
            # We are assuming only 2 messages for the same source when the content of files change
            if( $message =~ /md5/ ){
                $key = $message;
                #say color('cyan').$key.color('reset');
            } else {
                $value = $message;
            }
        }
        $log_diff->{$key} = $value if $key;
    }
    for my $event ( @$events ){
        my $changed = "changed";
        my $status_color = 'green';
        my $status = $event->{status};
        if( $status eq "noop" ){
            $changed = "wants to change";
            $status_color = 'yellow';
        } elsif( $status eq "skipped" ){
            $changed = "would have changed";
            $status_color = 'blue';
        } elsif( $status eq "failure" ){
            $changed = "would have changed";
            $status_color = 'red';
        }
        my $new_value_color = 'blue';
        if( $event->{new_value} and $event->{new_value} =~ /purged|stopped/ ){
            $new_value_color = 'red';
        }
        if( (
                ( !$opt_s and $status ne 'skipped' ) or
                ( $opt_s and $status =~ /$opt_s/ )
            ) and (
                ( !$opt_r ) or
                ( $opt_r and $event->{resource_type} =~ /$opt_r/i )
            ) and (
                ( !$opt_n ) or
                ( $opt_n and $event->{resource_title} =~ /$opt_n/i )
            ) and (
                ( !$opt_m ) or
                ( $opt_m and $event->{message} =~ /$opt_m/i )
            )
          ){
            say color('green').$event->{certname}.color('reset').": ".
                color('magenta').$event->{resource_type}." ".color('reset').
                color('blue').$event->{resource_title}.color('reset').
                " $changed from: ".
                color('cyan').$event->{old_value}.color('reset').
                " to: ".
                color($new_value_color).$event->{new_value}.color('reset').
                color($status_color)." ($status)".color('reset');
            say color('green').$event->{certname}.color('reset').": ".color('magenta').$event->{message}.color('reset') if $opt_v;
            #say color('blue').Dumper( $logs ).color('reset');
            #say $log_diff->{$event->{message}}.color('reset') if $opt_v and $log_diff->{$event->{message}};
            if( $opt_v and $log_diff->{$event->{message}} ){
                my $diff = $log_diff->{$event->{message}};
                $diff =~ s/\n/\n::::::/g;
                my @diff = split /::::::/, $diff;
                $cd->colorize( \@diff );
                #my @c_diff = `echo -e '$diff' | colordiff`;
                for( @diff ){
                    DiffHighlight::handle_line( $_ );
                }
                DiffHighlight::flush();
            }
            print color('green').$event->{certname}.color('reset').": " if $opt_e or $opt_t;
            print "Environment was '".$event->{environment}."'" if $opt_e;
            print ", " if $opt_e and $opt_t;
            my $time = $puppet_db->parse_puppetdb_time( $report->{end_time} ) if $opt_t;
            print "Puppet run finished at ".strftime "%Y-%m-%d %H:%M:%S", localtime($time) if $opt_t;
            print "\n" if $opt_e or $opt_t;
        }
    }
}


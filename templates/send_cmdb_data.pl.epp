#!<%= $perl_path %>
#
#  This file is generated by Puppet - do not edit in place!
#
#  Converts Puppet generated JSON to CSV format suitable for import into a CMDB
#
#  Author: Matthew Mallard
#  Date:   14-11-2018
#

<% if !empty($perl_lib_path) { %>
use lib '<%= $perl_lib_path %>';
<% } %>
use strict;
use Data::Dumper;
use Puppet::DB;
use MIME::Base64;
use Net::SMTP;
use YAML qw(LoadFile);
use Hash::Flatten qw(:all);
use 5.10.0;

my $config = LoadFile( "<%= $api_access_config_path %>" );

my $email_to = [ qw( <% $cmdb_email_to.each | $email | { -%><%= $email %> <% } %> ) ];
chomp( my $date_tag = `date +%b%d` );
my $email_doc = "Linux_Servers_${date_tag}.csv";

my $mappings = {
<% $cmdb_import_mappings.keys.each | $key | { -%>
                '<%= $key -%>' => '<%= $cmdb_import_mappings[$key] -%>',
<% } -%>
               };
my $headings = [ keys %$mappings ];
my $attribute_list = [ values %$mappings ];

# Narrow down to only hosts that have reported in the last day or so
say "Getting the latest Puppet facts from the PuppetDB";
my $puppet_db = Puppet::DB->new(
    server_name => $config->{puppetdb_host},
    server_port => $config->{puppetdb_port},
);
chomp( my $query_date = `date  -d "1 day ago" +"%Y-%m-%d"` );
my $query_filter = Load("<%= $cmdb_filter %>");
my $rule = {query => [ "and",
                       [ ">=", "report_timestamp", "$query_date 00:00:00" ],
                       $query_filter,
                     ]};
$puppet_db->refresh( "nodes", $rule );
my $nodes = $puppet_db->results;
my @nodes;
for my $node ( @$nodes ){
   push @nodes, $node->{certname};
}
$puppet_db->refresh(  "facts", {} );
my $facts = $puppet_db->results;
my $clean_facts = {};
my %facts;

for my $entry ( @$facts ){
    # Convert complex facts into dot notation for easy selection
    my $values = flatten( { $entry->{name} => $entry->{value} } );
    for my $value ( keys %$values ){
        $clean_facts->{$entry->{certname}}{$value} = $values->{$value};
    }
}

say "Converting to CSV format";
my $csv = join( ",", @$headings)."\r\n";
for my $host ( @nodes ){
    my @line;
    for my $attr ( @$attribute_list ){
	    push @line,  $clean_facts->{$host}{$attr};
    }
    $csv .= '"'.join( '","', @line)."\"\r\n";

}

say "Sending the CSV file as an attachment in an email";
my $attachment = encode_base64( $csv );

my $smtp = Net::SMTP->new('localhost') or die $!;

my $boundary = 'frontier';

$smtp->mail($ENV{USER});
$smtp->to(@$email_to);

$smtp->data();
$smtp->datasend("To: ".join(",",@$email_to)."\n");
$smtp->datasend("Subject: Linux Servers List Update\n");
$smtp->datasend("MIME-Version: 1.0\n");
$smtp->datasend("Content-type: multipart/mixed;\n\tboundary=\"$boundary\"\n");
$smtp->datasend("\n");
$smtp->datasend("--$boundary\n");
$smtp->datasend("Content-Type: application/octet-stream\n");
$smtp->datasend("Content-Transfer-Encoding: base64\n");
$smtp->datasend("Content-Disposition: attachment; filename=\"$email_doc\"\n");
$smtp->datasend("\n");
$smtp->datasend($attachment);
$smtp->datasend("--$boundary\n");
$smtp->dataend();
$smtp->quit;
